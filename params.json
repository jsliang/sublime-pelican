{"name":"SublimePelican","tagline":"A plugin for Pelican integration to Sublime Text.","body":"# SublimePelican: Pelican integration to Sublime Text\r\n\r\n**SublimePelican** is a [Sublime Text](http://www.sublimetext.com/) plugin that makes writing [Pelican](http://getpelican.com/) articles easier and faster.\r\n\r\nThe plugin prepares metadata fields for you, with the ability to fill in current date, to generate slug, and to list categories and tags you've used.\r\n[More features](https://github.com/jsliang/sublime-pelican/issues?labels=enhancement&page=1&state=open) to be added.\r\n\r\n## Installation\r\n\r\n### Installation with Package Control\r\n\r\nThe easiest way to install SublimePelican is via [Will Bond](http://wbond.net/)'s [Sublime Package Control](http://wbond.net/sublime_packages/package_control).\r\nPackage Control automatically updates SublimePelican to the latest version for you.\r\n\r\n1.  If you haven't installed Sublime Package Control, follow the steps here: http://wbond.net/sublime_packages/package_control/installation\r\n2.  Open Sublime Text and bring up the Command Palette (OS X: `Command+Shift+P`; Linux/Windows: `Control+Shift+P`).\r\n3.  Select \"Package Control: Install Package\", and wait for Package Control to fetch the package list.\r\n4.  When the list appears in the quick panel, type `Pelican` to select Pelican.\r\n\r\n\r\n### Installation without Git\r\n\r\n1.  Download the [latest source from GitHub](https://nodeload.github.com/jsliang/sublime-pelican/zip/master).\r\n2.  Copy the `sublime-pelican-master` folder to your Sublime Text Packages directory.\r\n3.  Rename the `sublime-pelican-master` folder to `Pelican`.\r\n\r\nIf you're not sure where your Sublime Text Packages directory is, open Sublime Text and select menu item **Preference** > **Browse Packages...**\r\n\r\n### Installation with Git\r\n\r\nClone this repository into your Sublime Text Packages directory:\r\n\r\n    git clone https://github.com/jsliang/sublime-pelican.git\r\n    mv sublime-pelican Pelican\r\n\r\nwhich is equivalent to:\r\n\r\n    git clone https://github.com/jsliang/sublime-pelican.git Pelican\r\n\r\nIf you're not sure where your Sublime Text Packages directory is, open Sublime Text and select menu item **Preference** > **Browse Packages...**\r\n\r\n## Usage\r\n\r\n### Access commands from Command Palette\r\n\r\n1.  After installation, bring up the Command Palette (OS X: `Command+Shift+P`; Linux/Windows: `Control+Shift+P`).\r\n2.  Type `Pelican` in Command Palette to view a list of available commands.\r\n\r\n### Access commands from Context Menu\r\n\r\nRight click on a file being edit, and access the commands under the **SublimePelican** item.\r\n\r\n## SublimePelican Commands\r\n\r\n*   **Pelican: New Article (Markdown)** and **Pelican: New Article (reStructuredText)**\r\n\r\n    These commands open a new article and have metadata fields prepared for you.\r\n\r\n    Metadata are generated according to your metadata template.\r\n    Refer to [Settings](#settings) > [Customizable metadata template](#customizable-metadata-template) for instructions on metadata template customization.\r\n\r\n*   **Pelican: Insert Metadata**\r\n\r\n    This command inserts and reorganizes metadata fields in the current opening article file.\r\n    Metadata fields are listed in the same order as your metadata template definition.\r\n\r\n    If the opening article has existing metadata fields, the command preserves these field values.\r\n    Fields not listed in the metadata template are preserved too.\r\n\r\n*   **Pelican: Insert Category**\r\n\r\n    ![Screenshot of Pelican: Insert Category](http://jsliang.com/sublime-pelican/sublimepelican_insert_category.png)\r\n\r\n    If you think it's hard to remember what categories you've used when writing articles, then this command is made for you.\r\n    This command lists categories you've used in your Pelican site in the quick panel, allowing you to fuzzily select and insert a previously used category quickly.\r\n\r\n*   **Pelican: Insert Tag**\r\n\r\n    ![Screenshot of Pelican: Insert Tag](http://jsliang.com/sublime-pelican/sublimepelican_insert_tag.png)\r\n\r\n    If you think it's hard to remember what tags you've used when writing articles, then this command is made for you.\r\n    This command lists tags you've used in your Pelican site in the quick panel, allowing you to fuzzily select and insert a previously used tag quickly.\r\n\r\n*   **Pelican: Update Article Date**\r\n\r\n    This command updates the date metadata field to current date and time.\r\n\r\n*   **Pelican: Update Slug using Title**\r\n\r\n    This command generates the slug field from article title.\r\n    *Known issue: Non-ASCII characters are omitted (see issue [#1](https://github.com/jsliang/sublime-pelican/issues/1)).*\r\n\r\n## Settings\r\n\r\nFor the latest information on what SublimePelican settings are available, select the menu item **Preferences** > **Package Settings** > **SublimePelican** > **Settings - Default**.\r\n\r\nDO NOT edit the settings in \"Settings - Default\" as changes will be lost when SublimePelican is updated.\r\nInstead, customize your settings in **Preferences** > **Package Settings** > **SublimePelican** > **Settings - User**.\r\n\r\n### Smart metadata fields generation\r\n\r\n#### Slug generation\r\n\r\n*   **force_slug_regeneration**\r\n\r\n    By default, slug is not automatically generated if a slug has been defined in the article.\r\n    Set to `true` to force slug regeneration.\r\n\r\n    Default value: `false`\r\n\r\n*   **generate_slug_from_title**\r\n\r\n    -   Set to `\"none\"` to disable slug generation\r\n\r\n    -   Set to `\"title_change\"` to generate slug when article title changes\r\n\r\n        Note that when set to `\"title_change\"`, slug will be regenerated everytime you type in the title line, even if `force_slug_regeneration` is set to `false`.\r\n\r\n    -   Set to `\"save\"` to generate slug on save\r\n\r\n        By default, slug is not automatically generated if a slug has been defined in the article.\r\n        This is to prevent unwanted slug change.\r\n        If you want to force slug regeneration on each save, you have to set `force_slug_regeneration` to `true`.\r\n\r\n    Default value: `\"save\"`\r\n\r\n### Customizable metadata template\r\n\r\n*   **article_metadata_template**\r\n\r\n    Metadata template for Markdown & reStructuredText articles.\r\n\r\n    Default value:\r\n\r\n```\r\n{\r\n    // Metadata template for Markdown articles\r\n    \"md\":\r\n        [\r\n            \"Title: %(title)s\",\r\n            \"Slug: %(slug)s\",\r\n            \"Date: %(date)s\",\r\n            \"Tags: %(tags)s\",\r\n            \"Category: %(category)s\",\r\n            \"Author: %(author)s\",\r\n            \"Lang: %(lang)s\",\r\n            \"Summary: %(summary)s\"\r\n        ],\r\n\r\n    // Metadata template for reStructuredText articles\r\n    \"rst\":\r\n        [\r\n            \":title: %(title)s\",\r\n            \":slug: %(slug)s\",\r\n            \":date: %(date)s\",\r\n            \":tags: %(tags)s\",\r\n            \":category: %(category)s\",\r\n            \":author: %(author)s\",\r\n            \":lang: %(lang)s\",\r\n            \":summary: %(summary)s\"\r\n        ]\r\n}\r\n```\r\n\r\n### File Path Filter for Pelican Articles\r\n\r\nTo prevent automatic slug generation from annoyly affecting other Markdown/reStrcturedText files that are not Pelican articles, SublimePelican processes only the Markdown/reStructuredText files under the `INPUTDIR` configured in your Pelican Makefile.\r\n\r\n*   **use_input_folder_in_makefile**\r\n\r\n    When set to `false`, SublimePelican will use the regular expression defined in `filepath_filter` as the file path filter for Pelican articles.\r\n\r\n    Default value: `true`\r\n\r\n*   **filepath_filter**\r\n\r\n    File path filter for Pelican articles, written in a Python regular expression.\r\n    Effective only if `use_input_folder_in_makefile` is set to `false`.\r\n\r\n    By default, only Markdown/reStructuredText files under `content/` directory are deemed as Pelican article files.\r\n\r\n    Default value: `\"content/.*\\\\.(md|markdown|mkd|rst)$\"`\r\n\r\n\r\n## Comments and Bug Reports\r\n\r\nIf you have any comments, or if you find any bugs, feel free to post them in [issues](https://github.com/jsliang/sublime-pelican/issues).\r\n\r\n## Thanks\r\n\r\n*   [Pelican](http://getpelican.com/)\r\n*   [Sublime Text](http://www.sublimetext.com/)\r\n*   [Sublime Package Control](http://wbond.net/sublime_packages/package_control)\r\n\r\n## License\r\n\r\nSublimePelican is licensed under the MIT license.\r\n\r\nCopyright (c) 2013, Jui-Shan Liang &lt;jenny@jsliang.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"302519554","note":"Don't delete this file! It's used internally to help with page regeneration."}
